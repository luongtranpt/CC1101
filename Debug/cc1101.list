
cc1101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002114  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080022ac  080022ac  000122ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002404  08002404  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002404  08002404  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002404  08002404  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002404  08002404  00012404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002408  08002408  00012408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800240c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000001c  08002428  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002428  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009275  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bb5  00000000  00000000  000292c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  0002ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002b748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013162  00000000  00000000  0002bf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000775c  00000000  00000000  0003f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067937  00000000  00000000  000467ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ae125  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b4  00000000  00000000  000ae178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002294 	.word	0x08002294

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08002294 	.word	0x08002294

080001d8 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80001dc:	4b14      	ldr	r3, [pc, #80]	; (8000230 <DWT_Delay_Init+0x58>)
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	4a13      	ldr	r2, [pc, #76]	; (8000230 <DWT_Delay_Init+0x58>)
 80001e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80001e6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80001e8:	4b11      	ldr	r3, [pc, #68]	; (8000230 <DWT_Delay_Init+0x58>)
 80001ea:	68db      	ldr	r3, [r3, #12]
 80001ec:	4a10      	ldr	r2, [pc, #64]	; (8000230 <DWT_Delay_Init+0x58>)
 80001ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001f2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <DWT_Delay_Init+0x5c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0e      	ldr	r2, [pc, #56]	; (8000234 <DWT_Delay_Init+0x5c>)
 80001fa:	f023 0301 	bic.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <DWT_Delay_Init+0x5c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <DWT_Delay_Init+0x5c>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <DWT_Delay_Init+0x5c>)
 800020e:	2200      	movs	r2, #0
 8000210:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000212:	bf00      	nop
     __ASM volatile ("NOP");
 8000214:	bf00      	nop
  __ASM volatile ("NOP");
 8000216:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <DWT_Delay_Init+0x5c>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000220:	2300      	movs	r3, #0
 8000222:	e000      	b.n	8000226 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000224:	2301      	movs	r3, #1
  }
}
 8000226:	4618      	mov	r0, r3
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	e000edf0 	.word	0xe000edf0
 8000234:	e0001000 	.word	0xe0001000

08000238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__NVIC_GetPriorityGrouping+0x18>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	0a1b      	lsrs	r3, r3, #8
 8000242:	f003 0307 	and.w	r3, r3, #7
}
 8000246:	4618      	mov	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	2b00      	cmp	r3, #0
 8000264:	db0b      	blt.n	800027e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 021f 	and.w	r2, r3, #31
 800026c:	4907      	ldr	r1, [pc, #28]	; (800028c <__NVIC_EnableIRQ+0x38>)
 800026e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000272:	095b      	lsrs	r3, r3, #5
 8000274:	2001      	movs	r0, #1
 8000276:	fa00 f202 	lsl.w	r2, r0, r2
 800027a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e100 	.word	0xe000e100

08000290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	db0a      	blt.n	80002ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <__NVIC_SetPriority+0x4c>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	0112      	lsls	r2, r2, #4
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	440b      	add	r3, r1
 80002b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b8:	e00a      	b.n	80002d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4908      	ldr	r1, [pc, #32]	; (80002e0 <__NVIC_SetPriority+0x50>)
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	f003 030f 	and.w	r3, r3, #15
 80002c6:	3b04      	subs	r3, #4
 80002c8:	0112      	lsls	r2, r2, #4
 80002ca:	b2d2      	uxtb	r2, r2
 80002cc:	440b      	add	r3, r1
 80002ce:	761a      	strb	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000e100 	.word	0xe000e100
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b089      	sub	sp, #36	; 0x24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	f003 0307 	and.w	r3, r3, #7
 80002f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002f8:	69fb      	ldr	r3, [r7, #28]
 80002fa:	f1c3 0307 	rsb	r3, r3, #7
 80002fe:	2b04      	cmp	r3, #4
 8000300:	bf28      	it	cs
 8000302:	2304      	movcs	r3, #4
 8000304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	3304      	adds	r3, #4
 800030a:	2b06      	cmp	r3, #6
 800030c:	d902      	bls.n	8000314 <NVIC_EncodePriority+0x30>
 800030e:	69fb      	ldr	r3, [r7, #28]
 8000310:	3b03      	subs	r3, #3
 8000312:	e000      	b.n	8000316 <NVIC_EncodePriority+0x32>
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000318:	f04f 32ff 	mov.w	r2, #4294967295
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	fa02 f303 	lsl.w	r3, r2, r3
 8000322:	43da      	mvns	r2, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	401a      	ands	r2, r3
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800032c:	f04f 31ff 	mov.w	r1, #4294967295
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	43d9      	mvns	r1, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800033c:	4313      	orrs	r3, r2
         );
}
 800033e:	4618      	mov	r0, r3
 8000340:	3724      	adds	r7, #36	; 0x24
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
	...

0800034c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000358:	4907      	ldr	r1, [pc, #28]	; (8000378 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4013      	ands	r3, r2
 8000368:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800036a:	68fb      	ldr	r3, [r7, #12]
}
 800036c:	bf00      	nop
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40023800 	.word	0x40023800

0800037c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000386:	4a13      	ldr	r2, [pc, #76]	; (80003d4 <LL_SYSCFG_SetEXTISource+0x58>)
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	3302      	adds	r3, #2
 800038e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	0c1b      	lsrs	r3, r3, #16
 8000396:	43db      	mvns	r3, r3
 8000398:	ea02 0103 	and.w	r1, r2, r3
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	0c1b      	lsrs	r3, r3, #16
 80003a0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	fa93 f3a3 	rbit	r3, r3
 80003a8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	fab3 f383 	clz	r3, r3
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	fa03 f202 	lsl.w	r2, r3, r2
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <LL_SYSCFG_SetEXTISource+0x58>)
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	430a      	orrs	r2, r1
 80003c2:	3302      	adds	r3, #2
 80003c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40013800 	.word	0x40013800

080003d8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003d8:	b480      	push	{r7}
 80003da:	b089      	sub	sp, #36	; 0x24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	fa93 f3a3 	rbit	r3, r3
 80003f2:	613b      	str	r3, [r7, #16]
  return result;
 80003f4:	693b      	ldr	r3, [r7, #16]
 80003f6:	fab3 f383 	clz	r3, r3
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	2103      	movs	r1, #3
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800040c:	69fb      	ldr	r3, [r7, #28]
 800040e:	fa93 f3a3 	rbit	r3, r3
 8000412:	61bb      	str	r3, [r7, #24]
  return result;
 8000414:	69bb      	ldr	r3, [r7, #24]
 8000416:	fab3 f383 	clz	r3, r3
 800041a:	b2db      	uxtb	r3, r3
 800041c:	005b      	lsls	r3, r3, #1
 800041e:	6879      	ldr	r1, [r7, #4]
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	431a      	orrs	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	601a      	str	r2, [r3, #0]
}
 800042a:	bf00      	nop
 800042c:	3724      	adds	r7, #36	; 0x24
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000436:	b480      	push	{r7}
 8000438:	b089      	sub	sp, #36	; 0x24
 800043a:	af00      	add	r7, sp, #0
 800043c:	60f8      	str	r0, [r7, #12]
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	68da      	ldr	r2, [r3, #12]
 8000446:	68bb      	ldr	r3, [r7, #8]
 8000448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	fa93 f3a3 	rbit	r3, r3
 8000450:	613b      	str	r3, [r7, #16]
  return result;
 8000452:	693b      	ldr	r3, [r7, #16]
 8000454:	fab3 f383 	clz	r3, r3
 8000458:	b2db      	uxtb	r3, r3
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	2103      	movs	r1, #3
 800045e:	fa01 f303 	lsl.w	r3, r1, r3
 8000462:	43db      	mvns	r3, r3
 8000464:	401a      	ands	r2, r3
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	fa93 f3a3 	rbit	r3, r3
 8000470:	61bb      	str	r3, [r7, #24]
  return result;
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	fab3 f383 	clz	r3, r3
 8000478:	b2db      	uxtb	r3, r3
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	6879      	ldr	r1, [r7, #4]
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	431a      	orrs	r2, r3
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	60da      	str	r2, [r3, #12]
}
 8000488:	bf00      	nop
 800048a:	3724      	adds	r7, #36	; 0x24
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	041a      	lsls	r2, r3, #16
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	619a      	str	r2, [r3, #24]
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
	...

080004b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80004ba:	f107 0318 	add.w	r3, r7, #24
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c4:	463b      	mov	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]
 80004d2:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80004d4:	2080      	movs	r0, #128	; 0x80
 80004d6:	f7ff ff39 	bl	800034c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff ff36 	bl	800034c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80004e0:	2002      	movs	r0, #2
 80004e2:	f7ff ff33 	bl	800034c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(CSn_GPIO_Port, CSn_Pin);
 80004e6:	2110      	movs	r1, #16
 80004e8:	4820      	ldr	r0, [pc, #128]	; (800056c <MX_GPIO_Init+0xb8>)
 80004ea:	f7ff ffd3 	bl	8000494 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CSn_Pin;
 80004ee:	2310      	movs	r3, #16
 80004f0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004f2:	2301      	movs	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CSn_GPIO_Port, &GPIO_InitStruct);
 8000502:	463b      	mov	r3, r7
 8000504:	4619      	mov	r1, r3
 8000506:	4819      	ldr	r0, [pc, #100]	; (800056c <MX_GPIO_Init+0xb8>)
 8000508:	f001 fb62 	bl	8001bd0 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 800050c:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000510:	2001      	movs	r0, #1
 8000512:	f7ff ff33 	bl	800037c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000516:	2301      	movs	r3, #1
 8000518:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800051a:	2301      	movs	r3, #1
 800051c:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800051e:	2300      	movs	r3, #0
 8000520:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000522:	2301      	movs	r3, #1
 8000524:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	4618      	mov	r0, r3
 800052c:	f001 f9ca 	bl	80018c4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GDO0_INT_GPIO_Port, GDO0_INT_Pin, LL_GPIO_PULL_UP);
 8000530:	2201      	movs	r2, #1
 8000532:	2101      	movs	r1, #1
 8000534:	480e      	ldr	r0, [pc, #56]	; (8000570 <MX_GPIO_Init+0xbc>)
 8000536:	f7ff ff7e 	bl	8000436 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GDO0_INT_GPIO_Port, GDO0_INT_Pin, LL_GPIO_MODE_INPUT);
 800053a:	2200      	movs	r2, #0
 800053c:	2101      	movs	r1, #1
 800053e:	480c      	ldr	r0, [pc, #48]	; (8000570 <MX_GPIO_Init+0xbc>)
 8000540:	f7ff ff4a 	bl	80003d8 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000544:	f7ff fe78 	bl	8000238 <__NVIC_GetPriorityGrouping>
 8000548:	4603      	mov	r3, r0
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fec8 	bl	80002e4 <NVIC_EncodePriority>
 8000554:	4603      	mov	r3, r0
 8000556:	4619      	mov	r1, r3
 8000558:	2006      	movs	r0, #6
 800055a:	f7ff fe99 	bl	8000290 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800055e:	2006      	movs	r0, #6
 8000560:	f7ff fe78 	bl	8000254 <__NVIC_EnableIRQ>

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40020000 	.word	0x40020000
 8000570:	40020400 	.word	0x40020400

08000574 <__NVIC_SetPriorityGrouping>:
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f003 0307 	and.w	r3, r3, #7
 8000582:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000590:	4013      	ands	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800059c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005a6:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <__NVIC_SetPriorityGrouping+0x44>)
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	60d3      	str	r3, [r2, #12]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <LL_RCC_HSI_Enable+0x1c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <LL_RCC_HSI_Enable+0x1c>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800

080005dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <LL_RCC_HSI_IsReady+0x20>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	bf0c      	ite	eq
 80005ec:	2301      	moveq	r3, #1
 80005ee:	2300      	movne	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40023800 	.word	0x40023800

08000600 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	4904      	ldr	r1, [pc, #16]	; (8000628 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000616:	4313      	orrs	r3, r2
 8000618:	600b      	str	r3, [r1, #0]
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <LL_RCC_SetSysClkSource+0x24>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f023 0203 	bic.w	r2, r3, #3
 800063c:	4904      	ldr	r1, [pc, #16]	; (8000650 <LL_RCC_SetSysClkSource+0x24>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	608b      	str	r3, [r1, #8]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40023800 	.word	0x40023800

08000654 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <LL_RCC_GetSysClkSource+0x18>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f003 030c 	and.w	r3, r3, #12
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <LL_RCC_SetAHBPrescaler+0x24>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000680:	4904      	ldr	r1, [pc, #16]	; (8000694 <LL_RCC_SetAHBPrescaler+0x24>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4313      	orrs	r3, r2
 8000686:	608b      	str	r3, [r1, #8]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	40023800 	.word	0x40023800

08000698 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80006a8:	4904      	ldr	r1, [pc, #16]	; (80006bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	608b      	str	r3, [r1, #8]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40023800 	.word	0x40023800

080006c0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80006d0:	4904      	ldr	r1, [pc, #16]	; (80006e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	608b      	str	r3, [r1, #8]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	40023800 	.word	0x40023800

080006e8 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <LL_RCC_SetTIMPrescaler+0x28>)
 80006f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80006f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80006fa:	4905      	ldr	r1, [pc, #20]	; (8000710 <LL_RCC_SetTIMPrescaler+0x28>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4313      	orrs	r3, r2
 8000700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	40023800 	.word	0x40023800

08000714 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <LL_RCC_PLL_Enable+0x1c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <LL_RCC_PLL_Enable+0x1c>)
 800071e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <LL_RCC_PLL_IsReady+0x24>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000744:	bf0c      	ite	eq
 8000746:	2301      	moveq	r3, #1
 8000748:	2300      	movne	r3, #0
 800074a:	b2db      	uxtb	r3, r3
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800076c:	685a      	ldr	r2, [r3, #4]
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000770:	4013      	ands	r3, r2
 8000772:	68f9      	ldr	r1, [r7, #12]
 8000774:	68ba      	ldr	r2, [r7, #8]
 8000776:	4311      	orrs	r1, r2
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	0192      	lsls	r2, r2, #6
 800077c:	430a      	orrs	r2, r1
 800077e:	4908      	ldr	r1, [pc, #32]	; (80007a0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000780:	4313      	orrs	r3, r2
 8000782:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800078c:	4904      	ldr	r1, [pc, #16]	; (80007a0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	4313      	orrs	r3, r2
 8000792:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	40023800 	.word	0x40023800
 80007a4:	ffbf8000 	.word	0xffbf8000

080007a8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b4:	4907      	ldr	r1, [pc, #28]	; (80007d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4013      	ands	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	40023800 	.word	0x40023800

080007d8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007e4:	4907      	ldr	r1, [pc, #28]	; (8000804 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4013      	ands	r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007f6:	68fb      	ldr	r3, [r7, #12]
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	40023800 	.word	0x40023800

08000808 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <LL_FLASH_SetLatency+0x24>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f023 0207 	bic.w	r2, r3, #7
 8000818:	4904      	ldr	r1, [pc, #16]	; (800082c <LL_FLASH_SetLatency+0x24>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4313      	orrs	r3, r2
 800081e:	600b      	str	r3, [r1, #0]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	40023c00 	.word	0x40023c00

08000830 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <LL_FLASH_GetLatency+0x18>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f003 0307 	and.w	r3, r3, #7
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	40023c00 	.word	0x40023c00

0800084c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800085c:	4904      	ldr	r1, [pc, #16]	; (8000870 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	600b      	str	r3, [r1, #0]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40007000 	.word	0x40007000

08000874 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	601a      	str	r2, [r3, #0]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f043 0201 	orr.w	r2, r3, #1
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	601a      	str	r2, [r3, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af02      	add	r7, sp, #8

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80008ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008be:	f7ff ff8b 	bl	80007d8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80008c2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80008c6:	f7ff ff6f 	bl	80007a8 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ca:	2003      	movs	r0, #3
 80008cc:	f7ff fe52 	bl	8000574 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d0:	f000 f83e 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d4:	f7ff fdee 	bl	80004b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008d8:	f000 fdc6 	bl	8001468 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008dc:	f000 fefe 	bl	80016dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_SPI_Init(&hspi1);
  LL_TIM_EnableCounter(TIM1);
 80008e0:	4816      	ldr	r0, [pc, #88]	; (800093c <main+0x88>)
 80008e2:	f7ff ffd7 	bl	8000894 <LL_TIM_EnableCounter>
  LL_SPI_Enable(SPI1);
 80008e6:	4816      	ldr	r0, [pc, #88]	; (8000940 <main+0x8c>)
 80008e8:	f7ff ffc4 	bl	8000874 <LL_SPI_Enable>
  //HAL_Delay(100);
  LL_mDelay(100);
 80008ec:	2064      	movs	r0, #100	; 0x64
 80008ee:	f001 fc6f 	bl	80021d0 <LL_mDelay>
  rf_begin(SPI1,GFSK_1_2_kb, MHz434, GPIOA, LL_GPIO_PIN_4, LL_GPIO_PIN_0);
 80008f2:	2301      	movs	r3, #1
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	2310      	movs	r3, #16
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <main+0x90>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	2101      	movs	r1, #1
 8000900:	480f      	ldr	r0, [pc, #60]	; (8000940 <main+0x8c>)
 8000902:	f000 f917 	bl	8000b34 <rf_begin>
  a = send_frame( (uint8_t*) data_tx, sizeof(data_tx));
 8000906:	2114      	movs	r1, #20
 8000908:	480f      	ldr	r0, [pc, #60]	; (8000948 <main+0x94>)
 800090a:	f000 fb31 	bl	8000f70 <send_frame>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <main+0x98>)
 8000914:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rf_begin(SPI1, GFSK_1_2_kb, MHz434, GPIOA, LL_GPIO_PIN_4, LL_GPIO_PIN_0);
 8000916:	2301      	movs	r3, #1
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	2310      	movs	r3, #16
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <main+0x90>)
 8000920:	2202      	movs	r2, #2
 8000922:	2101      	movs	r1, #1
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <main+0x8c>)
 8000926:	f000 f905 	bl	8000b34 <rf_begin>
//         hehe = rf_read_register(VERSION);
        // LL_mDelay(1);
	//  LL_SPI_TransmitData8(SPI1, VERSION);
	 // LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);

		a = send_frame( (uint8_t*) data_tx, sizeof(data_tx));
 800092a:	2114      	movs	r1, #20
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <main+0x94>)
 800092e:	f000 fb1f 	bl	8000f70 <send_frame>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <main+0x98>)
 8000938:	701a      	strb	r2, [r3, #0]
	  rf_begin(SPI1, GFSK_1_2_kb, MHz434, GPIOA, LL_GPIO_PIN_4, LL_GPIO_PIN_0);
 800093a:	e7ec      	b.n	8000916 <main+0x62>
 800093c:	40010000 	.word	0x40010000
 8000940:	40013000 	.word	0x40013000
 8000944:	40020000 	.word	0x40020000
 8000948:	20000000 	.word	0x20000000
 800094c:	2000005a 	.word	0x2000005a

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ff57 	bl	8000808 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800095a:	bf00      	nop
 800095c:	f7ff ff68 	bl	8000830 <LL_FLASH_GetLatency>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d1fa      	bne.n	800095c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000966:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800096a:	f7ff ff6f 	bl	800084c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 800096e:	2010      	movs	r0, #16
 8000970:	f7ff fe46 	bl	8000600 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000974:	f7ff fe22 	bl	80005bc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000978:	bf00      	nop
 800097a:	f7ff fe2f 	bl	80005dc <LL_RCC_HSI_IsReady>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d1fa      	bne.n	800097a <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_8, 64, LL_RCC_PLLP_DIV_2);
 8000984:	2300      	movs	r3, #0
 8000986:	2240      	movs	r2, #64	; 0x40
 8000988:	2108      	movs	r1, #8
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fee6 	bl	800075c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000990:	f7ff fec0 	bl	8000714 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000994:	bf00      	nop
 8000996:	f7ff fecd 	bl	8000734 <LL_RCC_PLL_IsReady>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d1fa      	bne.n	8000996 <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 80009a0:	2080      	movs	r0, #128	; 0x80
 80009a2:	f7ff fe65 	bl	8000670 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f7ff fe76 	bl	8000698 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff fe87 	bl	80006c0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80009b2:	2002      	movs	r0, #2
 80009b4:	f7ff fe3a 	bl	800062c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80009b8:	bf00      	nop
 80009ba:	f7ff fe4b 	bl	8000654 <LL_RCC_GetSysClkSource>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b08      	cmp	r3, #8
 80009c2:	d1fa      	bne.n	80009ba <SystemClock_Config+0x6a>
  {

  }
  LL_Init1msTick(32000000);
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <SystemClock_Config+0x8c>)
 80009c6:	f001 fbf5 	bl	80021b4 <LL_Init1msTick>
  LL_SetSystemCoreClock(32000000);
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <SystemClock_Config+0x8c>)
 80009cc:	f001 fc26 	bl	800221c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff fe89 	bl	80006e8 <LL_RCC_SetTIMPrescaler>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	01e84800 	.word	0x01e84800

080009e0 <LL_GPIO_SetOutputPin>:
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	619a      	str	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <LL_GPIO_ResetOutputPin>:
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	041a      	lsls	r2, r3, #16
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	619a      	str	r2, [r3, #24]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d101      	bne.n	8000a32 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000a32:	2300      	movs	r3, #0
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f003 0302 	and.w	r3, r3, #2
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d101      	bne.n	8000a58 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000a54:	2301      	movs	r3, #1
 8000a56:	e000      	b.n	8000a5a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	2b80      	cmp	r3, #128	; 0x80
 8000a78:	d101      	bne.n	8000a7e <LL_SPI_IsActiveFlag_BSY+0x18>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	330c      	adds	r3, #12
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	330c      	adds	r3, #12
 8000ab8:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	78fa      	ldrb	r2, [r7, #3]
 8000abe:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DWT_Delay_us>:
//  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
//
//  /* Delay till end */
//  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
//}
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <DWT_Delay_us+0x48>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	61fb      	str	r3, [r7, #28]

    /* Get the system clock frequency */
    LL_RCC_ClocksTypeDef rcc_clocks;
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f95a 	bl	8001d98 <LL_RCC_GetSystemClocksFreq>
    uint32_t hclk_frequency = rcc_clocks.HCLK_Frequency;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	61bb      	str	r3, [r7, #24]

    /* Convert microseconds to clock cycles */
    microseconds *= (hclk_frequency / 1000000);
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <DWT_Delay_us+0x4c>)
 8000aec:	fba2 2303 	umull	r2, r3, r2, r3
 8000af0:	0c9b      	lsrs	r3, r3, #18
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	fb02 f303 	mul.w	r3, r2, r3
 8000af8:	607b      	str	r3, [r7, #4]

    /* Delay till end */
    while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000afa:	bf00      	nop
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <DWT_Delay_us+0x48>)
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	1ad2      	subs	r2, r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d3f8      	bcc.n	8000afc <DWT_Delay_us+0x30>
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	e0001000 	.word	0xe0001000
 8000b18:	431bde83 	.word	0x431bde83

08000b1c <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <rf_begin>:
/* Private user code ---------------------------------------------------------*/

/* RF DRIVER ----------------------------------------------------------------------------------------------------------------------*/

/*--------------------------[CC1101 Init and Settings]------------------------------*/
uint8_t rf_begin(SPI_TypeDef* SPIx, MODULATION_TypeDef mode, ISMBAND_TypeDef ism_band, GPIO_TypeDef* cs_port, uint16_t cs_pin, uint16_t gdo0){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	72fb      	strb	r3, [r7, #11]
 8000b42:	4613      	mov	r3, r2
 8000b44:	72bb      	strb	r3, [r7, #10]
	 * @param gdo0: Pin number of the pin connected to C1101 CGDO0, used for interruptions. Interruption is configured as FALLING EDGE.
	 *
	 */

	//Pinout linking
	ll_spi = SPIx;
 8000b46:	4a23      	ldr	r2, [pc, #140]	; (8000bd4 <rf_begin+0xa0>)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	6013      	str	r3, [r2, #0]
	CS_GPIO_Port = cs_port;
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <rf_begin+0xa4>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
	CS_Pin = cs_pin;
 8000b52:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <rf_begin+0xa8>)
 8000b54:	8b3b      	ldrh	r3, [r7, #24]
 8000b56:	8013      	strh	r3, [r2, #0]
	GDO0_Pin = gdo0;
 8000b58:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <rf_begin+0xac>)
 8000b5a:	8bbb      	ldrh	r3, [r7, #28]
 8000b5c:	8013      	strh	r3, [r2, #0]

	//Turn on the chip
	rf_reset();
 8000b5e:	f000 f845 	bl	8000bec <rf_reset>

	//Check that the SPI works
	if(!rf_check()){
 8000b62:	f000 f869 	bl	8000c38 <rf_check>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d104      	bne.n	8000b76 <rf_begin+0x42>
		ab = 1;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <rf_begin+0xb0>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
		return FALSE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e029      	b.n	8000bca <rf_begin+0x96>
	}


	rf_write_strobe(SFTX); //Flush TX FIFO
 8000b76:	203b      	movs	r0, #59	; 0x3b
 8000b78:	f000 fafe 	bl	8001178 <rf_write_strobe>
	LL_mDelay(1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f001 fb27 	bl	80021d0 <LL_mDelay>
	//HAL_Delay(1); //TODO I don't think this is really needed

	//LL_mDelay(1);
	rf_write_strobe(SFRX); //Flush RX FIFO
 8000b82:	203a      	movs	r0, #58	; 0x3a
 8000b84:	f000 faf8 	bl	8001178 <rf_write_strobe>
	//HAL_Delay(1);
	LL_mDelay(1);
 8000b88:	2001      	movs	r0, #1
 8000b8a:	f001 fb21 	bl	80021d0 <LL_mDelay>
	rf_set_modulation_mode(mode);
 8000b8e:	7afb      	ldrb	r3, [r7, #11]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f000 f86d 	bl	8000c70 <rf_set_modulation_mode>
	check = rf_read_register(MDMCFG2);
 8000b96:	2012      	movs	r0, #18
 8000b98:	f000 faff 	bl	800119a <rf_read_register>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <rf_begin+0xb4>)
 8000ba2:	701a      	strb	r2, [r3, #0]
	check = rf_read_register(MDMCFG2);
 8000ba4:	2012      	movs	r0, #18
 8000ba6:	f000 faf8 	bl	800119a <rf_read_register>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <rf_begin+0xb4>)
 8000bb0:	701a      	strb	r2, [r3, #0]
	rf_set_ISMband(ism_band);
 8000bb2:	7abb      	ldrb	r3, [r7, #10]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 f89d 	bl	8000cf4 <rf_set_ISMband>
	rf_set_channel(0);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f8fc 	bl	8000db8 <rf_set_channel>
	rf_set_output_power_level(-30);
 8000bc0:	f06f 001d 	mvn.w	r0, #29
 8000bc4:	f000 f906 	bl	8000dd4 <rf_set_output_power_level>
	return TRUE;
 8000bc8:	2301      	movs	r3, #1


}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000080 	.word	0x20000080
 8000bd8:	20000088 	.word	0x20000088
 8000bdc:	20000092 	.word	0x20000092
 8000be0:	20000090 	.word	0x20000090
 8000be4:	2000007d 	.word	0x2000007d
 8000be8:	20000098 	.word	0x20000098

08000bec <rf_reset>:

void rf_reset(){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	/**
	 * @brief Turns on the RF chip with a specific sequence on the CS pin and a SRES command. - trình tự cụ thể
	 * The former is only needed on a cold start.
	 */
	DWT_Delay_Init(); // Init lib delay
 8000bf0:	f7ff faf2 	bl	80001d8 <DWT_Delay_Init>

	//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
	LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <rf_reset+0x44>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <rf_reset+0x48>)
 8000bfa:	8812      	ldrh	r2, [r2, #0]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fefc 	bl	80009fc <LL_GPIO_ResetOutputPin>
	DWT_Delay_us(10);
 8000c04:	200a      	movs	r0, #10
 8000c06:	f7ff ff61 	bl	8000acc <DWT_Delay_us>

	//HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
	LL_GPIO_SetOutputPin(CS_GPIO_Port, CS_Pin);
 8000c0a:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <rf_reset+0x44>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <rf_reset+0x48>)
 8000c10:	8812      	ldrh	r2, [r2, #0]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fee3 	bl	80009e0 <LL_GPIO_SetOutputPin>
	DWT_Delay_us(40);
 8000c1a:	2028      	movs	r0, #40	; 0x28
 8000c1c:	f7ff ff56 	bl	8000acc <DWT_Delay_us>


	rf_write_strobe(SRES);
 8000c20:	2030      	movs	r0, #48	; 0x30
 8000c22:	f000 faa9 	bl	8001178 <rf_write_strobe>
	//HAL_Delay(1);
	LL_mDelay(1);
 8000c26:	2001      	movs	r0, #1
 8000c28:	f001 fad2 	bl	80021d0 <LL_mDelay>

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000088 	.word	0x20000088
 8000c34:	20000092 	.word	0x20000092

08000c38 <rf_check>:

uint8_t rf_check(){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	/**
	 * @brief Checks the version of the RF chip to check if SPI is OK. It checks 10 times to make sure wires are really OK.
	 */

	uint8_t ok = TRUE;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for(i=0; i<10; i++){
 8000c42:	2300      	movs	r3, #0
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	e009      	b.n	8000c5c <rf_check+0x24>
		version = rf_read_register(VERSION);
 8000c48:	20f1      	movs	r0, #241	; 0xf1
 8000c4a:	f000 faa6 	bl	800119a <rf_read_register>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <rf_check+0x34>)
 8000c54:	701a      	strb	r2, [r3, #0]
	for(i=0; i<10; i++){
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b09      	cmp	r3, #9
 8000c60:	d9f2      	bls.n	8000c48 <rf_check+0x10>
//	if (ok){
//		printf("RF check: OK\n\r");
//	}else{
//		printf("RF check: No luck :(\n\r");
//	}
	return ok;
 8000c62:	79bb      	ldrb	r3, [r7, #6]

}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000084 	.word	0x20000084

08000c70 <rf_set_modulation_mode>:

void rf_set_modulation_mode(MODULATION_TypeDef mode){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	 * @brief Loads the wanted modulation preset to the CC1101.
	 */

    const uint8_t* cfg_reg;

    switch (mode)
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	2b05      	cmp	r3, #5
 8000c80:	d820      	bhi.n	8000cc4 <rf_set_modulation_mode+0x54>
 8000c82:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <rf_set_modulation_mode+0x18>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000ca1 	.word	0x08000ca1
 8000c8c:	08000ca7 	.word	0x08000ca7
 8000c90:	08000cad 	.word	0x08000cad
 8000c94:	08000cb3 	.word	0x08000cb3
 8000c98:	08000cb9 	.word	0x08000cb9
 8000c9c:	08000cbf 	.word	0x08000cbf
    {
        case GFSK_1_2_kb:
        			cfg_reg = cc1100_GFSK_1_2_kb;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <rf_set_modulation_mode+0x6c>)
 8000ca2:	60fb      	str	r3, [r7, #12]
                    break;
 8000ca4:	e011      	b.n	8000cca <rf_set_modulation_mode+0x5a>
        case GFSK_38_4_kb:
                    cfg_reg = cc1100_GFSK_38_4_kb;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <rf_set_modulation_mode+0x70>)
 8000ca8:	60fb      	str	r3, [r7, #12]
                    break;
 8000caa:	e00e      	b.n	8000cca <rf_set_modulation_mode+0x5a>
        case GFSK_100_kb:
        			cfg_reg = cc1100_GFSK_100_kb;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <rf_set_modulation_mode+0x74>)
 8000cae:	60fb      	str	r3, [r7, #12]
                    break;
 8000cb0:	e00b      	b.n	8000cca <rf_set_modulation_mode+0x5a>
        case MSK_250_kb:
        			cfg_reg = cc1100_MSK_250_kb;
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <rf_set_modulation_mode+0x78>)
 8000cb4:	60fb      	str	r3, [r7, #12]
                    break;
 8000cb6:	e008      	b.n	8000cca <rf_set_modulation_mode+0x5a>
        case MSK_500_kb:
        			cfg_reg = cc1100_MSK_500_kb;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <rf_set_modulation_mode+0x7c>)
 8000cba:	60fb      	str	r3, [r7, #12]
                    break;
 8000cbc:	e005      	b.n	8000cca <rf_set_modulation_mode+0x5a>
        case OOK_4_8_kb:
        			cfg_reg = cc1100_OOK_4_8_kb;
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <rf_set_modulation_mode+0x80>)
 8000cc0:	60fb      	str	r3, [r7, #12]
                    break;
 8000cc2:	e002      	b.n	8000cca <rf_set_modulation_mode+0x5a>
        default:
        			cfg_reg = cc1100_GFSK_38_4_kb;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <rf_set_modulation_mode+0x70>)
 8000cc6:	60fb      	str	r3, [r7, #12]
                    break;
 8000cc8:	bf00      	nop
    }

    rf_write_data(WRITE_BURST(0), (uint8_t *) cfg_reg, CFG_REGISTER);                            //writes all 47 config register
 8000cca:	222f      	movs	r2, #47	; 0x2f
 8000ccc:	68f9      	ldr	r1, [r7, #12]
 8000cce:	2040      	movs	r0, #64	; 0x40
 8000cd0:	f000 fa8d 	bl	80011ee <rf_write_data>


}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	080022cc 	.word	0x080022cc
 8000ce0:	080022fc 	.word	0x080022fc
 8000ce4:	0800232c 	.word	0x0800232c
 8000ce8:	0800235c 	.word	0x0800235c
 8000cec:	0800238c 	.word	0x0800238c
 8000cf0:	080023bc 	.word	0x080023bc

08000cf4 <rf_set_ISMband>:

//(Semi)DEPRECATED
void rf_set_ISMband(ISMBAND_TypeDef band){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	 * Deprecated by rf_set_frequency(float), although the second still doesn't configure the PATABLES registers, so it is still needed.
	 */
    uint8_t freq2, freq1, freq0;
    const uint8_t* patable;

    switch (band)
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d82e      	bhi.n	8000d64 <rf_set_ISMband+0x70>
 8000d06:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <rf_set_ISMband+0x18>)
 8000d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0c:	08000d1d 	.word	0x08000d1d
 8000d10:	08000d2f 	.word	0x08000d2f
 8000d14:	08000d41 	.word	0x08000d41
 8000d18:	08000d53 	.word	0x08000d53
    {
        case MHz315:
                    freq2=0x0C;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	73fb      	strb	r3, [r7, #15]
                    freq1=0x1D;
 8000d20:	231d      	movs	r3, #29
 8000d22:	73bb      	strb	r3, [r7, #14]
                    freq0=0x89;
 8000d24:	2389      	movs	r3, #137	; 0x89
 8000d26:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_315;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <rf_set_ISMband+0xb4>)
 8000d2a:	60bb      	str	r3, [r7, #8]
                    break;
 8000d2c:	e023      	b.n	8000d76 <rf_set_ISMband+0x82>
        case MHz434:                                                          //433.92MHz
                    freq2=0x10;
 8000d2e:	2310      	movs	r3, #16
 8000d30:	73fb      	strb	r3, [r7, #15]
                    freq1=0xB0;
 8000d32:	23b0      	movs	r3, #176	; 0xb0
 8000d34:	73bb      	strb	r3, [r7, #14]
                    freq0=0x71;
 8000d36:	2371      	movs	r3, #113	; 0x71
 8000d38:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_433;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <rf_set_ISMband+0xb8>)
 8000d3c:	60bb      	str	r3, [r7, #8]
                    break;
 8000d3e:	e01a      	b.n	8000d76 <rf_set_ISMband+0x82>
        case MHz868:                                                          //868.3MHz
                    freq2=0x21;
 8000d40:	2321      	movs	r3, #33	; 0x21
 8000d42:	73fb      	strb	r3, [r7, #15]
                    freq1=0x65;
 8000d44:	2365      	movs	r3, #101	; 0x65
 8000d46:	73bb      	strb	r3, [r7, #14]
                    freq0=0x6A;
 8000d48:	236a      	movs	r3, #106	; 0x6a
 8000d4a:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_868;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <rf_set_ISMband+0xbc>)
 8000d4e:	60bb      	str	r3, [r7, #8]
                    break;
 8000d50:	e011      	b.n	8000d76 <rf_set_ISMband+0x82>
        case MHz915:
                    freq2=0x23;
 8000d52:	2323      	movs	r3, #35	; 0x23
 8000d54:	73fb      	strb	r3, [r7, #15]
                    freq1=0x31;
 8000d56:	2331      	movs	r3, #49	; 0x31
 8000d58:	73bb      	strb	r3, [r7, #14]
                    freq0=0x3B;
 8000d5a:	233b      	movs	r3, #59	; 0x3b
 8000d5c:	737b      	strb	r3, [r7, #13]
                    patable = patable_power_915;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <rf_set_ISMband+0xc0>)
 8000d60:	60bb      	str	r3, [r7, #8]
                    break;
 8000d62:	e008      	b.n	8000d76 <rf_set_ISMband+0x82>
        default:                                                          //868.3MHz
					freq2=0x21;
 8000d64:	2321      	movs	r3, #33	; 0x21
 8000d66:	73fb      	strb	r3, [r7, #15]
					freq1=0x65;
 8000d68:	2365      	movs	r3, #101	; 0x65
 8000d6a:	73bb      	strb	r3, [r7, #14]
					freq0=0x6A;
 8000d6c:	236a      	movs	r3, #106	; 0x6a
 8000d6e:	737b      	strb	r3, [r7, #13]
					patable = patable_power_868;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <rf_set_ISMband+0xbc>)
 8000d72:	60bb      	str	r3, [r7, #8]
					break;
 8000d74:	bf00      	nop
    }
    rf_write_register(FREQ2,freq2);
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	200d      	movs	r0, #13
 8000d7c:	f000 fa23 	bl	80011c6 <rf_write_register>
    rf_write_register(FREQ1,freq1);
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	4619      	mov	r1, r3
 8000d84:	200e      	movs	r0, #14
 8000d86:	f000 fa1e 	bl	80011c6 <rf_write_register>
    rf_write_register(FREQ0,freq0);
 8000d8a:	7b7b      	ldrb	r3, [r7, #13]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 fa19 	bl	80011c6 <rf_write_register>
    rf_write_data(PATABLE_BURST, (uint8_t *) patable, 8);
 8000d94:	2208      	movs	r2, #8
 8000d96:	68b9      	ldr	r1, [r7, #8]
 8000d98:	207e      	movs	r0, #126	; 0x7e
 8000d9a:	f000 fa28 	bl	80011ee <rf_write_data>
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	080022ac 	.word	0x080022ac
 8000dac:	080022b4 	.word	0x080022b4
 8000db0:	080022bc 	.word	0x080022bc
 8000db4:	080022c4 	.word	0x080022c4

08000db8 <rf_set_channel>:

void rf_set_channel(uint8_t channel){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
	/*
	 * @brief Set channel number.
	 */
	rf_write_register(CHANNR, channel);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	200a      	movs	r0, #10
 8000dc8:	f000 f9fd 	bl	80011c6 <rf_write_register>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <rf_set_output_power_level>:

void rf_set_output_power_level(int8_t dBm)
/*
 * @brief Selects the entry of the PATABLES preset selected previously.
 */
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
    uint8_t pa = 0xC0;
 8000dde:	23c0      	movs	r3, #192	; 0xc0
 8000de0:	73fb      	strb	r3, [r7, #15]

    if      (dBm <= -30) pa = 0x00;
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	f113 0f1d 	cmn.w	r3, #29
 8000dea:	da02      	bge.n	8000df2 <rf_set_output_power_level+0x1e>
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e032      	b.n	8000e58 <rf_set_output_power_level+0x84>
    else if (dBm <= -20) pa = 0x01;
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	f113 0f13 	cmn.w	r3, #19
 8000dfa:	da02      	bge.n	8000e02 <rf_set_output_power_level+0x2e>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	73fb      	strb	r3, [r7, #15]
 8000e00:	e02a      	b.n	8000e58 <rf_set_output_power_level+0x84>
    else if (dBm <= -15) pa = 0x02;
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	f113 0f0e 	cmn.w	r3, #14
 8000e0a:	da02      	bge.n	8000e12 <rf_set_output_power_level+0x3e>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e022      	b.n	8000e58 <rf_set_output_power_level+0x84>
    else if (dBm <= -10) pa = 0x03;
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	f113 0f09 	cmn.w	r3, #9
 8000e1a:	da02      	bge.n	8000e22 <rf_set_output_power_level+0x4e>
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e01a      	b.n	8000e58 <rf_set_output_power_level+0x84>
    else if (dBm <= 0)   pa = 0x04;
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	dc02      	bgt.n	8000e30 <rf_set_output_power_level+0x5c>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	e013      	b.n	8000e58 <rf_set_output_power_level+0x84>
    else if (dBm <= 5)   pa = 0x05;
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b05      	cmp	r3, #5
 8000e36:	dc02      	bgt.n	8000e3e <rf_set_output_power_level+0x6a>
 8000e38:	2305      	movs	r3, #5
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e00c      	b.n	8000e58 <rf_set_output_power_level+0x84>
    else if (dBm <= 7)   pa = 0x06;
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b07      	cmp	r3, #7
 8000e44:	dc02      	bgt.n	8000e4c <rf_set_output_power_level+0x78>
 8000e46:	2306      	movs	r3, #6
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e005      	b.n	8000e58 <rf_set_output_power_level+0x84>
    else if (dBm <= 10)  pa = 0x07;
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b0a      	cmp	r3, #10
 8000e52:	dc01      	bgt.n	8000e58 <rf_set_output_power_level+0x84>
 8000e54:	2307      	movs	r3, #7
 8000e56:	73fb      	strb	r3, [r7, #15]

    rf_write_register(FREND0,pa);
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2022      	movs	r0, #34	; 0x22
 8000e5e:	f000 f9b2 	bl	80011c6 <rf_write_register>
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <rf_sidle>:

}


/*----------------------------[CC1101 States]----------------------------------------------*/
void rf_sidle(){
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
	/**
	 * @brief Set RF chip to idle state
	 */
    uint8_t marcstate;

    rf_write_strobe(SIDLE);              //sets to idle first. must be in
 8000e70:	2036      	movs	r0, #54	; 0x36
 8000e72:	f000 f981 	bl	8001178 <rf_write_strobe>

    marcstate = 0xFF;                     //set unknown/dummy state value
 8000e76:	23ff      	movs	r3, #255	; 0xff
 8000e78:	71fb      	strb	r3, [r7, #7]

    while(marcstate != IDLE)
 8000e7a:	e006      	b.n	8000e8a <rf_sidle+0x20>
    {
        marcstate = (rf_read_register(MARCSTATE) & 0x1F);
 8000e7c:	20f5      	movs	r0, #245	; 0xf5
 8000e7e:	f000 f98c 	bl	800119a <rf_read_register>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	71fb      	strb	r3, [r7, #7]
    while(marcstate != IDLE)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d1f5      	bne.n	8000e7c <rf_sidle+0x12>
    }

}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <_keep_transmiting_data>:
    LL_mDelay(100);
}

/*----------------------------[CC1101 Data Flow]----------------------------------------------*/

uint8_t _keep_transmiting_data(uint8_t* data, int len){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
	/**
	 * @brief This function CONTINUES the transmission of data, but DOES NOT start it. Controls the data flow from the MCU to C1101 once
	 * started.
	 */
	int len_transmited = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
	uint32_t start_tick = LL_TIM_GetCounter(TIM1);
 8000eaa:	482e      	ldr	r0, [pc, #184]	; (8000f64 <_keep_transmiting_data+0xc8>)
 8000eac:	f7ff fe36 	bl	8000b1c <LL_TIM_GetCounter>
 8000eb0:	6138      	str	r0, [r7, #16]
	uint8_t last_chunk = len%DATA_CHUNK_SIZE;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	425a      	negs	r2, r3
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	f002 021f 	and.w	r2, r2, #31
 8000ebe:	bf58      	it	pl
 8000ec0:	4253      	negpl	r3, r2
 8000ec2:	73fb      	strb	r3, [r7, #15]
	GDO0_FLAG = 0;
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <_keep_transmiting_data+0xcc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
	while(len_transmited <len-last_chunk){
 8000eca:	e021      	b.n	8000f10 <_keep_transmiting_data+0x74>
		if(GDO0_FLAG){
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <_keep_transmiting_data+0xcc>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d011      	beq.n	8000ef8 <_keep_transmiting_data+0x5c>
		//while(rf_read_register(TXBYTES)>DATA_CHUNK_SIZE); //Suing polling because OBC Int. does not work.
			GDO0_FLAG = 0;
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <_keep_transmiting_data+0xcc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
			rf_write_data(TXFIFO, &data[len_transmited], DATA_CHUNK_SIZE);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	2220      	movs	r2, #32
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	203f      	movs	r0, #63	; 0x3f
 8000ee6:	f000 f982 	bl	80011ee <rf_write_data>
			len_transmited +=DATA_CHUNK_SIZE;
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3320      	adds	r3, #32
 8000eee:	617b      	str	r3, [r7, #20]
			start_tick = LL_TIM_GetCounter(TIM1);
 8000ef0:	481c      	ldr	r0, [pc, #112]	; (8000f64 <_keep_transmiting_data+0xc8>)
 8000ef2:	f7ff fe13 	bl	8000b1c <LL_TIM_GetCounter>
 8000ef6:	6138      	str	r0, [r7, #16]

		}
		if(LL_TIM_GetCounter(TIM1)-start_tick> TimeOut) return FALSE;
 8000ef8:	481a      	ldr	r0, [pc, #104]	; (8000f64 <_keep_transmiting_data+0xc8>)
 8000efa:	f7ff fe0f 	bl	8000b1c <LL_TIM_GetCounter>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad2      	subs	r2, r2, r3
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <_keep_transmiting_data+0xd0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d901      	bls.n	8000f10 <_keep_transmiting_data+0x74>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e025      	b.n	8000f5c <_keep_transmiting_data+0xc0>
	while(len_transmited <len-last_chunk){
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbd7      	blt.n	8000ecc <_keep_transmiting_data+0x30>
	}
	if(last_chunk){
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d01b      	beq.n	8000f5a <_keep_transmiting_data+0xbe>
		while(!GDO0_FLAG);
 8000f22:	bf00      	nop
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_keep_transmiting_data+0xcc>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0fb      	beq.n	8000f24 <_keep_transmiting_data+0x88>
		//while(rf_read_register(TXBYTES)>DATA_CHUNK_SIZE); //Using polling because OBC Int. does not work.
		GDO0_FLAG = 0;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <_keep_transmiting_data+0xcc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
		rf_write_data(TXFIFO, &data[len_transmited], last_chunk);
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	203f      	movs	r0, #63	; 0x3f
 8000f3e:	f000 f956 	bl	80011ee <rf_write_data>
		if(LL_TIM_GetCounter(TIM1)-start_tick> TimeOut) return FALSE;
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <_keep_transmiting_data+0xc8>)
 8000f44:	f7ff fdea 	bl	8000b1c <LL_TIM_GetCounter>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad2      	subs	r2, r2, r3
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_keep_transmiting_data+0xd0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d901      	bls.n	8000f5a <_keep_transmiting_data+0xbe>
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <_keep_transmiting_data+0xc0>
	}

	return TRUE;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40010000 	.word	0x40010000
 8000f68:	20000038 	.word	0x20000038
 8000f6c:	20000014 	.word	0x20000014

08000f70 <send_frame>:


 FRAMESTATUS_TypeDef send_frame(uint8_t* frame, int len){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	/**
	 * @brief Sends and unlimited length frame
	 * TODO RSSI and LQI values are appended to the packet, what to do with them?
	 */

	rf_sidle(); //Sets RF to idle state
 8000f7a:	f7ff ff76 	bl	8000e6a <rf_sidle>
	uint8_t pktcrtl0 = rf_read_register(PKTCTRL0);
 8000f7e:	2008      	movs	r0, #8
 8000f80:	f000 f90b 	bl	800119a <rf_read_register>
 8000f84:	4603      	mov	r3, r0
 8000f86:	77bb      	strb	r3, [r7, #30]
	pktcrtl0 = rf_read_register(PKTCTRL0);
 8000f88:	2008      	movs	r0, #8
 8000f8a:	f000 f906 	bl	800119a <rf_read_register>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	77bb      	strb	r3, [r7, #30]
	uint8_t frame_len = len%256;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	425a      	negs	r2, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	bf58      	it	pl
 8000f9c:	4253      	negpl	r3, r2
 8000f9e:	777b      	strb	r3, [r7, #29]
	pktcrtl0 = pktcrtl0 & 0xFC; //reset len mode
 8000fa0:	7fbb      	ldrb	r3, [r7, #30]
 8000fa2:	f023 0303 	bic.w	r3, r3, #3
 8000fa6:	77bb      	strb	r3, [r7, #30]
	int len_sent = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]

	//configure interruption, high to low when below threshold
	uint8_t iocfg0 = 0x2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	75fb      	strb	r3, [r7, #23]
	rf_write_register(IOCFG0, iocfg0);
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f000 f906 	bl	80011c6 <rf_write_register>
	GDO0_FLAG = 0;
 8000fba:	4b69      	ldr	r3, [pc, #420]	; (8001160 <send_frame+0x1f0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]

	rf_write_strobe(SFTX); //flush TX
 8000fc0:	203b      	movs	r0, #59	; 0x3b
 8000fc2:	f000 f8d9 	bl	8001178 <rf_write_strobe>
	//TODO check if flushed

	//set packet length
	rf_write_register(PKTLEN, frame_len);
 8000fc6:	7f7b      	ldrb	r3, [r7, #29]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2006      	movs	r0, #6
 8000fcc:	f000 f8fb 	bl	80011c6 <rf_write_register>
	checklen = len;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b63      	ldr	r3, [pc, #396]	; (8001164 <send_frame+0x1f4>)
 8000fd6:	701a      	strb	r2, [r3, #0]

	if(len>FIXED_LENGTH_LIMIT){ //Use infinite packet length mode
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	dd48      	ble.n	8001070 <send_frame+0x100>
		//Set len mode to infinit
		pktcrtl0 = pktcrtl0 | 0x2;
 8000fde:	7fbb      	ldrb	r3, [r7, #30]
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	77bb      	strb	r3, [r7, #30]
		rf_write_register(PKTCTRL0, pktcrtl0);
 8000fe6:	7fbb      	ldrb	r3, [r7, #30]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2008      	movs	r0, #8
 8000fec:	f000 f8eb 	bl	80011c6 <rf_write_register>

		//we need to fill the buffer before activating TX mode, or the chip will get into tx underflow state.
		rf_write_data(TXFIFO, frame, FIFO_SIZE); //fill the buffer completely
 8000ff0:	2240      	movs	r2, #64	; 0x40
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	203f      	movs	r0, #63	; 0x3f
 8000ff6:	f000 f8fa 	bl	80011ee <rf_write_data>
		rf_write_strobe(STX); //Start transmision
 8000ffa:	2035      	movs	r0, #53	; 0x35
 8000ffc:	f000 f8bc 	bl	8001178 <rf_write_strobe>
		len_sent +=FIFO_SIZE;
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	3340      	adds	r3, #64	; 0x40
 8001004:	61bb      	str	r3, [r7, #24]

		int times = (len-len_sent)/FIFO_SIZE-1; //-1 to assure at bytes left to send them in receive mode
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	da00      	bge.n	8001012 <send_frame+0xa2>
 8001010:	333f      	adds	r3, #63	; 0x3f
 8001012:	119b      	asrs	r3, r3, #6
 8001014:	3b01      	subs	r3, #1
 8001016:	613b      	str	r3, [r7, #16]
		//transmit (len -d -255) bytes of data, where d are the number of bytes already sent
		if(!_keep_transmiting_data(&frame[len_sent], times*FIFO_SIZE)) return TIMEOUT;
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	441a      	add	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	019b      	lsls	r3, r3, #6
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f7ff ff39 	bl	8000e9c <_keep_transmiting_data>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <send_frame+0xc6>
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	e08f      	b.n	8001156 <send_frame+0x1e6>
		len_sent += times*FIFO_SIZE;
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	019b      	lsls	r3, r3, #6
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4413      	add	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]

		//transmit remaining bytes in fixed length mode.

		//Set len mode to fixed
		pktcrtl0 = pktcrtl0 & 0xFC;
 8001040:	7fbb      	ldrb	r3, [r7, #30]
 8001042:	f023 0303 	bic.w	r3, r3, #3
 8001046:	77bb      	strb	r3, [r7, #30]
		rf_write_register(PKTCTRL0, pktcrtl0);
 8001048:	7fbb      	ldrb	r3, [r7, #30]
 800104a:	4619      	mov	r1, r3
 800104c:	2008      	movs	r0, #8
 800104e:	f000 f8ba 	bl	80011c6 <rf_write_register>

		if(!_keep_transmiting_data(&frame[len_sent], len-len_sent)) return TIMEOUT;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	18d0      	adds	r0, r2, r3
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff ff1c 	bl	8000e9c <_keep_transmiting_data>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d12e      	bne.n	80010c8 <send_frame+0x158>
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e072      	b.n	8001156 <send_frame+0x1e6>

	}else{
		//Set len mode to fixed mode (default)
		rf_write_register(PKTCTRL0, pktcrtl0);
 8001070:	7fbb      	ldrb	r3, [r7, #30]
 8001072:	4619      	mov	r1, r3
 8001074:	2008      	movs	r0, #8
 8001076:	f000 f8a6 	bl	80011c6 <rf_write_register>

		if(len>FIFO_SIZE){ //Use variable packet length mode
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b40      	cmp	r3, #64	; 0x40
 800107e:	dd19      	ble.n	80010b4 <send_frame+0x144>
			rf_write_data(TXFIFO, frame, FIFO_SIZE);
 8001080:	2240      	movs	r2, #64	; 0x40
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	203f      	movs	r0, #63	; 0x3f
 8001086:	f000 f8b2 	bl	80011ee <rf_write_data>
			rf_write_strobe(STX);
 800108a:	2035      	movs	r0, #53	; 0x35
 800108c:	f000 f874 	bl	8001178 <rf_write_strobe>
			len_sent+=FIFO_SIZE;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	3340      	adds	r3, #64	; 0x40
 8001094:	61bb      	str	r3, [r7, #24]
			if(!_keep_transmiting_data(&frame[len_sent], len-len_sent)) return TIMEOUT;
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	18d0      	adds	r0, r2, r3
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fefa 	bl	8000e9c <_keep_transmiting_data>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10c      	bne.n	80010c8 <send_frame+0x158>
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e050      	b.n	8001156 <send_frame+0x1e6>
		}else{ //If len <= FIFO_SIZE, the FIFO needs to be filled once
			rf_write_data(TXFIFO, frame, len);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	461a      	mov	r2, r3
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	203f      	movs	r0, #63	; 0x3f
 80010be:	f000 f896 	bl	80011ee <rf_write_data>
			rf_write_strobe(STX);
 80010c2:	2035      	movs	r0, #53	; 0x35
 80010c4:	f000 f858 	bl	8001178 <rf_write_strobe>
//  rf_read_fifotx(TXFIFO, (uint8_t*) check2, 15);
//	for(int j = 0 ;j<10; j++)
//	{
//  check2[j] = rf_read_register(0x80 + j);
//	}
	LL_mDelay(500);
 80010c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010cc:	f001 f880 	bl	80021d0 <LL_mDelay>
    //byte1 = rf_read_register(0xFA);
    byte1 = rf_read_register(0xFA);
 80010d0:	20fa      	movs	r0, #250	; 0xfa
 80010d2:	f000 f862 	bl	800119a <rf_read_register>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <send_frame+0x1f8>)
 80010dc:	701a      	strb	r2, [r3, #0]
	uint32_t start_tick = LL_TIM_GetCounter(TIM1);
 80010de:	4823      	ldr	r0, [pc, #140]	; (800116c <send_frame+0x1fc>)
 80010e0:	f7ff fd1c 	bl	8000b1c <LL_TIM_GetCounter>
 80010e4:	60f8      	str	r0, [r7, #12]
	state1 = rf_read_register(MARCSTATE);
 80010e6:	20f5      	movs	r0, #245	; 0xf5
 80010e8:	f000 f857 	bl	800119a <rf_read_register>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <send_frame+0x200>)
 80010f2:	701a      	strb	r2, [r3, #0]
	uint8_t state2 = rf_read_register(MARCSTATE);
 80010f4:	20f5      	movs	r0, #245	; 0xf5
 80010f6:	f000 f850 	bl	800119a <rf_read_register>
 80010fa:	4603      	mov	r3, r0
 80010fc:	72fb      	strb	r3, [r7, #11]
	uint8_t state = rf_read_register(MARCSTATE);
 80010fe:	20f5      	movs	r0, #245	; 0xf5
 8001100:	f000 f84b 	bl	800119a <rf_read_register>
 8001104:	4603      	mov	r3, r0
 8001106:	77fb      	strb	r3, [r7, #31]
	state = rf_read_register(MARCSTATE);
 8001108:	20f5      	movs	r0, #245	; 0xf5
 800110a:	f000 f846 	bl	800119a <rf_read_register>
 800110e:	4603      	mov	r3, r0
 8001110:	77fb      	strb	r3, [r7, #31]
	while(state!=IDLE){
 8001112:	e01c      	b.n	800114e <send_frame+0x1de>
		//printf("%#20x\n\r", state);
		
		state = rf_read_register(MARCSTATE);
 8001114:	20f5      	movs	r0, #245	; 0xf5
 8001116:	f000 f840 	bl	800119a <rf_read_register>
 800111a:	4603      	mov	r3, r0
 800111c:	77fb      	strb	r3, [r7, #31]
		LL_mDelay(100);
 800111e:	2064      	movs	r0, #100	; 0x64
 8001120:	f001 f856 	bl	80021d0 <LL_mDelay>
		
		if(LL_TIM_GetCounter(TIM1)- start_tick > TimeOut){
 8001124:	4811      	ldr	r0, [pc, #68]	; (800116c <send_frame+0x1fc>)
 8001126:	f7ff fcf9 	bl	8000b1c <LL_TIM_GetCounter>
 800112a:	4602      	mov	r2, r0
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	1ad2      	subs	r2, r2, r3
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <send_frame+0x204>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d90a      	bls.n	800114e <send_frame+0x1de>
	
			if(state==TXFIFO_UNDERFLOW){
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	2b16      	cmp	r3, #22
 800113c:	d103      	bne.n	8001146 <send_frame+0x1d6>
				rf_write_strobe(SFTX);
 800113e:	203b      	movs	r0, #59	; 0x3b
 8001140:	f000 f81a 	bl	8001178 <rf_write_strobe>
 8001144:	e001      	b.n	800114a <send_frame+0x1da>
			}else{
				rf_sidle();
 8001146:	f7ff fe90 	bl	8000e6a <rf_sidle>
			}
			return FRAME_BAD;
 800114a:	2300      	movs	r3, #0
 800114c:	e003      	b.n	8001156 <send_frame+0x1e6>
	while(state!=IDLE){
 800114e:	7ffb      	ldrb	r3, [r7, #31]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d1df      	bne.n	8001114 <send_frame+0x1a4>
		}
	}


	//printf("FRAME SENDED\n\r");
    return FRAME_OK;
 8001154:	2301      	movs	r3, #1
}
 8001156:	4618      	mov	r0, r3
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000038 	.word	0x20000038
 8001164:	2000007f 	.word	0x2000007f
 8001168:	2000007e 	.word	0x2000007e
 800116c:	40010000 	.word	0x40010000
 8001170:	20000099 	.word	0x20000099
 8001174:	20000014 	.word	0x20000014

08001178 <rf_write_strobe>:
}


/* SPI Comm ----------------------------------------------------------------*/

void rf_write_strobe(uint8_t strobe){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Writes command to the CC1101 to change its state-machine state.
	 */
	strobe = WRITE(strobe);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	71fb      	strb	r3, [r7, #7]
	__spi_write(&strobe, NULL, NULL);
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f84d 	bl	800122c <__spi_write>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <rf_read_register>:

uint8_t rf_read_register(uint8_t reg){
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
	/**
	 * @brief Reads the content of a single 1-byte register.
	 * @Returns The register value.
	 */
	uint8_t data;
	reg= READ(reg);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	71fb      	strb	r3, [r7, #7]
	__spi_read(&reg, &data, 1);
 80011ae:	f107 010f 	add.w	r1, r7, #15
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	2201      	movs	r2, #1
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f89c 	bl	80012f4 <__spi_read>
	return data;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <rf_write_register>:

void rf_write_register(uint8_t reg, uint8_t data){
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	460a      	mov	r2, r1
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	4613      	mov	r3, r2
 80011d4:	71bb      	strb	r3, [r7, #6]
	/**
	 * @brief Overwrites a register.
	 */
	reg = WRITE(reg);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	71fb      	strb	r3, [r7, #7]
	__spi_write(&reg, &data, 1);
 80011da:	1db9      	adds	r1, r7, #6
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	2201      	movs	r2, #1
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 f823 	bl	800122c <__spi_write>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <rf_write_data>:
		addr = READ_TXFIFO(addr);
	}
	__spi_read(&addr, data, size);
}

void rf_write_data(uint8_t addr, uint8_t* data, uint8_t size){
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	6039      	str	r1, [r7, #0]
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	4613      	mov	r3, r2
 80011fc:	71bb      	strb	r3, [r7, #6]
	 * @brief Writes multiple data.
	 * @param addr Base address.
	 * @param data The buffer where the data to be written is located.
	 * @param size Number of bytes to be written.
	 */
	if(size>1){
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d905      	bls.n	8001210 <rf_write_data+0x22>
		addr = WRITE_BURST(addr);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120a:	b2db      	uxtb	r3, r3
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	e001      	b.n	8001214 <rf_write_data+0x26>
	}else{
		addr = WRITE(addr);
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	71fb      	strb	r3, [r7, #7]
	}
	__spi_write(&addr, data, size);
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	b29a      	uxth	r2, r3
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	6839      	ldr	r1, [r7, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f805 	bl	800122c <__spi_write>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <__spi_write>:
//		status = HAL_SPI_Transmit(hal_spi, pData, size, 0xFFFF);
//	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //set Chip Select to High
//	return status;
//
//}
uint8_t __spi_write(uint8_t *addr, uint8_t *pData, uint16_t size) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	4613      	mov	r3, r2
 8001238:	80fb      	strh	r3, [r7, #6]

	    // Set Chip Select to Low
	    LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <__spi_write+0xbc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a2b      	ldr	r2, [pc, #172]	; (80012ec <__spi_write+0xc0>)
 8001240:	8812      	ldrh	r2, [r2, #0]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fbd9 	bl	80009fc <LL_GPIO_ResetOutputPin>

	    // Wait until TXE flag is set
	    while (!LL_SPI_IsActiveFlag_TXE(ll_spi));
 800124a:	bf00      	nop
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <__spi_write+0xc4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fbf5 	bl	8000a40 <LL_SPI_IsActiveFlag_TXE>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f7      	beq.n	800124c <__spi_write+0x20>

	    // Send address
	    LL_SPI_TransmitData8(ll_spi, *addr);
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <__spi_write+0xc4>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4610      	mov	r0, r2
 8001268:	f7ff fc1e 	bl	8000aa8 <LL_SPI_TransmitData8>

	    // Wait until TXE flag is set
	    while (!LL_SPI_IsActiveFlag_TXE(ll_spi));
 800126c:	bf00      	nop
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <__spi_write+0xc4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fbe4 	bl	8000a40 <LL_SPI_IsActiveFlag_TXE>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f7      	beq.n	800126e <__spi_write+0x42>

	    // If pData is not NULL, send the data
	    if (pData != NULL)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d01b      	beq.n	80012bc <__spi_write+0x90>
	    {
	        for (uint16_t i = 0; i < size; i++)
 8001284:	2300      	movs	r3, #0
 8001286:	82fb      	strh	r3, [r7, #22]
 8001288:	e014      	b.n	80012b4 <__spi_write+0x88>
	        {
	            // Wait until TXE flag is set
	            while (!LL_SPI_IsActiveFlag_TXE(ll_spi));
 800128a:	bf00      	nop
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <__spi_write+0xc4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fbd5 	bl	8000a40 <LL_SPI_IsActiveFlag_TXE>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f7      	beq.n	800128c <__spi_write+0x60>

	            // Send data
	            LL_SPI_TransmitData8(ll_spi, pData[i]);
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <__spi_write+0xc4>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	8afb      	ldrh	r3, [r7, #22]
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fbfd 	bl	8000aa8 <LL_SPI_TransmitData8>
	        for (uint16_t i = 0; i < size; i++)
 80012ae:	8afb      	ldrh	r3, [r7, #22]
 80012b0:	3301      	adds	r3, #1
 80012b2:	82fb      	strh	r3, [r7, #22]
 80012b4:	8afa      	ldrh	r2, [r7, #22]
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3e6      	bcc.n	800128a <__spi_write+0x5e>

	        }
	    }

	    // Wait until the Busy flag is reset
	    while (LL_SPI_IsActiveFlag_BSY(ll_spi));
 80012bc:	bf00      	nop
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__spi_write+0xc4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fbcf 	bl	8000a66 <LL_SPI_IsActiveFlag_BSY>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f7      	bne.n	80012be <__spi_write+0x92>

	    // Set Chip Select to High
	    LL_GPIO_SetOutputPin(CS_GPIO_Port, CS_Pin);
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <__spi_write+0xbc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a06      	ldr	r2, [pc, #24]	; (80012ec <__spi_write+0xc0>)
 80012d4:	8812      	ldrh	r2, [r2, #0]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fb81 	bl	80009e0 <LL_GPIO_SetOutputPin>
}
 80012de:	bf00      	nop
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000088 	.word	0x20000088
 80012ec:	20000092 	.word	0x20000092
 80012f0:	20000080 	.word	0x20000080

080012f4 <__spi_read>:

uint8_t __spi_read(uint8_t *addr, uint8_t *pData, uint16_t size){
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	4613      	mov	r3, r2
 8001300:	80fb      	strh	r3, [r7, #6]
    // Set Chip Select to Low
    LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <__spi_read+0xc0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a2c      	ldr	r2, [pc, #176]	; (80013b8 <__spi_read+0xc4>)
 8001308:	8812      	ldrh	r2, [r2, #0]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb75 	bl	80009fc <LL_GPIO_ResetOutputPin>

    // Wait until TXE flag is set
    while (!LL_SPI_IsActiveFlag_TXE(ll_spi));
 8001312:	bf00      	nop
 8001314:	4b29      	ldr	r3, [pc, #164]	; (80013bc <__spi_read+0xc8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fb91 	bl	8000a40 <LL_SPI_IsActiveFlag_TXE>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f7      	beq.n	8001314 <__spi_read+0x20>
    // Send address
   LL_SPI_TransmitData8(ll_spi, *addr);
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <__spi_read+0xc8>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	4610      	mov	r0, r2
 8001330:	f7ff fbba 	bl	8000aa8 <LL_SPI_TransmitData8>
  // *pData = LL_SPI_ReceiveData8(ll_spi);
    //LL_SPI_TransmitData8(ll_spi, VERSION);
  // LL_mDelay(100);
    // Wait until TXE flag is set
    while (!LL_SPI_IsActiveFlag_TXE(ll_spi));
 8001334:	bf00      	nop
 8001336:	4b21      	ldr	r3, [pc, #132]	; (80013bc <__spi_read+0xc8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fb80 	bl	8000a40 <LL_SPI_IsActiveFlag_TXE>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f7      	beq.n	8001336 <__spi_read+0x42>
//    LL_mDelay(1);
//   while (!LL_SPI_IsActiveFlag_RXNE(ll_spi));
//    *pData = LL_SPI_ReceiveData8(ll_spi);
//    LL_mDelay(1);
    // If pData is not NULL, receive the data
    if (pData != NULL)
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d026      	beq.n	800139a <__spi_read+0xa6>
    {
       for (uint16_t i = 0; i < size; i++)
 800134c:	2300      	movs	r3, #0
 800134e:	82fb      	strh	r3, [r7, #22]
 8001350:	e01f      	b.n	8001392 <__spi_read+0x9e>
       {
            // Send dummy byte to generate clock
            LL_SPI_TransmitData8(ll_spi, 0x00);
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <__spi_read+0xc8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fba5 	bl	8000aa8 <LL_SPI_TransmitData8>
            // Wait until RXNE flag is set
            while (!LL_SPI_IsActiveFlag_RXNE(ll_spi));
 800135e:	bf00      	nop
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <__spi_read+0xc8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fb58 	bl	8000a1a <LL_SPI_IsActiveFlag_RXNE>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f7      	beq.n	8001360 <__spi_read+0x6c>

            // Read data
            pData[i] = LL_SPI_ReceiveData8(ll_spi);
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <__spi_read+0xc8>)
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	8afb      	ldrh	r3, [r7, #22]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	18d4      	adds	r4, r2, r3
 800137a:	4608      	mov	r0, r1
 800137c:	f7ff fb86 	bl	8000a8c <LL_SPI_ReceiveData8>
 8001380:	4603      	mov	r3, r0
 8001382:	7023      	strb	r3, [r4, #0]
            DWT_Delay_us(400);
 8001384:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001388:	f7ff fba0 	bl	8000acc <DWT_Delay_us>
       for (uint16_t i = 0; i < size; i++)
 800138c:	8afb      	ldrh	r3, [r7, #22]
 800138e:	3301      	adds	r3, #1
 8001390:	82fb      	strh	r3, [r7, #22]
 8001392:	8afa      	ldrh	r2, [r7, #22]
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	429a      	cmp	r2, r3
 8001398:	d3db      	bcc.n	8001352 <__spi_read+0x5e>
           // LL_mDelay(1);
        }
    }

    // Set Chip Select to High
    LL_GPIO_SetOutputPin(CS_GPIO_Port, CS_Pin);
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <__spi_read+0xc0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <__spi_read+0xc4>)
 80013a0:	8812      	ldrh	r2, [r2, #0]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fb1b 	bl	80009e0 <LL_GPIO_SetOutputPin>
}
 80013aa:	bf00      	nop
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	20000088 	.word	0x20000088
 80013b8:	20000092 	.word	0x20000092
 80013bc:	20000080 	.word	0x20000080

080013c0 <LL_AHB1_GRP1_EnableClock>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4013      	ands	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40023800 	.word	0x40023800

080013f0 <LL_APB2_GRP1_EnableClock>:
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <LL_APB2_GRP1_EnableClock+0x2c>)
 80013fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013fc:	4907      	ldr	r1, [pc, #28]	; (800141c <LL_APB2_GRP1_EnableClock+0x2c>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4313      	orrs	r3, r2
 8001402:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4013      	ands	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40023800 	.word	0x40023800

08001420 <LL_SPI_Enable>:
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_SPI_SetStandard>:
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f023 0210 	bic.w	r2, r3, #16
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	605a      	str	r2, [r3, #4]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b090      	sub	sp, #64	; 0x40
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	2228      	movs	r2, #40	; 0x28
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f000 ff04 	bl	8002284 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 800148c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001490:	f7ff ffae 	bl	80013f0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff ff93 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800149a:	23e0      	movs	r3, #224	; 0xe0
 800149c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800149e:	2302      	movs	r3, #2
 80014a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80014ae:	2305      	movs	r3, #5
 80014b0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4815      	ldr	r0, [pc, #84]	; (800150c <MX_SPI1_Init+0xa4>)
 80014b8:	f000 fb8a 	bl	8001bd0 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80014c0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80014c4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80014d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80014d8:	2318      	movs	r3, #24
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80014dc:	2300      	movs	r3, #0
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80014e4:	230a      	movs	r3, #10
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	4619      	mov	r1, r3
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <MX_SPI1_Init+0xa8>)
 80014f0:	f000 fd3f 	bl	8001f72 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80014f4:	2100      	movs	r1, #0
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_SPI1_Init+0xa8>)
 80014f8:	f7ff ffa2 	bl	8001440 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_SPI1_Init+0xa8>)
 80014fe:	f7ff ff8f 	bl	8001420 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3740      	adds	r7, #64	; 0x40
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40020000 	.word	0x40020000
 8001510:	40013000 	.word	0x40013000

08001514 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800151e:	695a      	ldr	r2, [r3, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4013      	ands	r3, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2db      	uxtb	r3, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40013c00 	.word	0x40013c00

08001540 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6153      	str	r3, [r2, #20]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40013c00 	.word	0x40013c00

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80015bc:	2001      	movs	r0, #1
 80015be:	f7ff ffa9 	bl	8001514 <LL_EXTI_IsActiveFlag_0_31>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00f      	beq.n	80015e8 <EXTI0_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff ffb9 	bl	8001540 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
	GDO0_FLAG = 1;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <EXTI0_IRQHandler+0x34>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
	i++;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <EXTI0_IRQHandler+0x38>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <EXTI0_IRQHandler+0x38>)
 80015dc:	6013      	str	r3, [r2, #0]
	u++;
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <EXTI0_IRQHandler+0x3c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <EXTI0_IRQHandler+0x3c>)
 80015e6:	6013      	str	r3, [r2, #0]
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000038 	.word	0x20000038
 80015f0:	20000094 	.word	0x20000094
 80015f4:	200000c4 	.word	0x200000c4

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <LL_APB2_GRP1_EnableClock>:
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001628:	4907      	ldr	r1, [pc, #28]	; (8001648 <LL_APB2_GRP1_EnableClock+0x2c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4313      	orrs	r3, r2
 800162e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001632:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4013      	ands	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40023800 	.word	0x40023800

0800164c <LL_TIM_EnableARRPreload>:
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	601a      	str	r2, [r3, #0]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800167e:	f023 0307 	bic.w	r3, r3, #7
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	609a      	str	r2, [r3, #8]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	605a      	str	r2, [r3, #4]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f7ff ff93 	bl	800161c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 80016f6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80016fa:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 31999;
 8001700:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8001704:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	4619      	mov	r1, r3
 8001712:	480a      	ldr	r0, [pc, #40]	; (800173c <MX_TIM1_Init+0x60>)
 8001714:	f000 fcba 	bl	800208c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM1);
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <MX_TIM1_Init+0x60>)
 800171a:	f7ff ff97 	bl	800164c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800171e:	2100      	movs	r1, #0
 8001720:	4806      	ldr	r0, [pc, #24]	; (800173c <MX_TIM1_Init+0x60>)
 8001722:	f7ff ffa3 	bl	800166c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001726:	2100      	movs	r1, #0
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_TIM1_Init+0x60>)
 800172a:	f7ff ffb4 	bl	8001696 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <MX_TIM1_Init+0x60>)
 8001730:	f7ff ffc4 	bl	80016bc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40010000 	.word	0x40010000

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001746:	490e      	ldr	r1, [pc, #56]	; (8001780 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800175c:	4c0b      	ldr	r4, [pc, #44]	; (800178c <LoopFillZerobss+0x26>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800176a:	f7ff ff45 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176e:	f000 fd65 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7ff f89f 	bl	80008b4 <main>
  bx  lr    
 8001776:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001784:	0800240c 	.word	0x0800240c
  ldr r2, =_sbss
 8001788:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800178c:	200000c8 	.word	0x200000c8

08001790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC_IRQHandler>
	...

08001794 <LL_EXTI_EnableIT_0_31>:
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <LL_EXTI_EnableIT_0_31+0x20>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4904      	ldr	r1, [pc, #16]	; (80017b4 <LL_EXTI_EnableIT_0_31+0x20>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40013c00 	.word	0x40013c00

080017b8 <LL_EXTI_DisableIT_0_31>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <LL_EXTI_DisableIT_0_31+0x24>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	4904      	ldr	r1, [pc, #16]	; (80017dc <LL_EXTI_DisableIT_0_31+0x24>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40013c00 	.word	0x40013c00

080017e0 <LL_EXTI_EnableEvent_0_31>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <LL_EXTI_EnableEvent_0_31+0x20>)
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	4904      	ldr	r1, [pc, #16]	; (8001800 <LL_EXTI_EnableEvent_0_31+0x20>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40013c00 	.word	0x40013c00

08001804 <LL_EXTI_DisableEvent_0_31>:
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <LL_EXTI_DisableEvent_0_31+0x24>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	43db      	mvns	r3, r3
 8001814:	4904      	ldr	r1, [pc, #16]	; (8001828 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001816:	4013      	ands	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40013c00 	.word	0x40013c00

0800182c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	4904      	ldr	r1, [pc, #16]	; (800184c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40013c00 	.word	0x40013c00

08001850 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	43db      	mvns	r3, r3
 8001860:	4904      	ldr	r1, [pc, #16]	; (8001874 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001862:	4013      	ands	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40013c00 	.word	0x40013c00

08001878 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	4904      	ldr	r1, [pc, #16]	; (8001898 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40013c00 	.word	0x40013c00

0800189c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	4904      	ldr	r1, [pc, #16]	; (80018c0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	60cb      	str	r3, [r1, #12]
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	791b      	ldrb	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d065      	beq.n	80019a4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d06c      	beq.n	80019ba <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	795b      	ldrb	r3, [r3, #5]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d01c      	beq.n	8001922 <LL_EXTI_Init+0x5e>
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	dc25      	bgt.n	8001938 <LL_EXTI_Init+0x74>
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <LL_EXTI_Init+0x32>
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d00b      	beq.n	800190c <LL_EXTI_Init+0x48>
 80018f4:	e020      	b.n	8001938 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff82 	bl	8001804 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff45 	bl	8001794 <LL_EXTI_EnableIT_0_31>
          break;
 800190a:	e018      	b.n	800193e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff51 	bl	80017b8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff60 	bl	80017e0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001920:	e00d      	b.n	800193e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff34 	bl	8001794 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff55 	bl	80017e0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001936:	e002      	b.n	800193e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
          break;
 800193c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	799b      	ldrb	r3, [r3, #6]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d039      	beq.n	80019ba <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	799b      	ldrb	r3, [r3, #6]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d01c      	beq.n	8001988 <LL_EXTI_Init+0xc4>
 800194e:	2b03      	cmp	r3, #3
 8001950:	dc25      	bgt.n	800199e <LL_EXTI_Init+0xda>
 8001952:	2b01      	cmp	r3, #1
 8001954:	d002      	beq.n	800195c <LL_EXTI_Init+0x98>
 8001956:	2b02      	cmp	r3, #2
 8001958:	d00b      	beq.n	8001972 <LL_EXTI_Init+0xae>
 800195a:	e020      	b.n	800199e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff9b 	bl	800189c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff5e 	bl	800182c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001970:	e024      	b.n	80019bc <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff6a 	bl	8001850 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff79 	bl	8001878 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001986:	e019      	b.n	80019bc <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff4d 	bl	800182c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff6e 	bl	8001878 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800199c:	e00e      	b.n	80019bc <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
            break;
 80019a2:	e00b      	b.n	80019bc <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff05 	bl	80017b8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff26 	bl	8001804 <LL_EXTI_DisableEvent_0_31>
 80019b8:	e000      	b.n	80019bc <LL_EXTI_Init+0xf8>
      }
 80019ba:	bf00      	nop
  }
  return status;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <LL_GPIO_SetPinMode>:
{
 80019c6:	b480      	push	{r7}
 80019c8:	b089      	sub	sp, #36	; 0x24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	613b      	str	r3, [r7, #16]
  return result;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2103      	movs	r1, #3
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	401a      	ands	r2, r3
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	61bb      	str	r3, [r7, #24]
  return result;
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	431a      	orrs	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	3724      	adds	r7, #36	; 0x24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_GPIO_SetPinOutputType>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	401a      	ands	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	431a      	orrs	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	605a      	str	r2, [r3, #4]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_GPIO_SetPinSpeed>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	613b      	str	r3, [r7, #16]
  return result;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	401a      	ands	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	61bb      	str	r3, [r7, #24]
  return result;
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	609a      	str	r2, [r3, #8]
}
 8001aa6:	bf00      	nop
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_GPIO_SetPinPull>:
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b089      	sub	sp, #36	; 0x24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	613b      	str	r3, [r7, #16]
  return result;
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2103      	movs	r1, #3
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	61bb      	str	r3, [r7, #24]
  return result;
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	431a      	orrs	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	60da      	str	r2, [r3, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3724      	adds	r7, #36	; 0x24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_GPIO_SetAFPin_0_7>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	613b      	str	r3, [r7, #16]
  return result;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	210f      	movs	r1, #15
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	61bb      	str	r3, [r7, #24]
  return result;
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	621a      	str	r2, [r3, #32]
}
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_GPIO_SetAFPin_8_15>:
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b089      	sub	sp, #36	; 0x24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	613b      	str	r3, [r7, #16]
  return result;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	210f      	movs	r1, #15
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	61bb      	str	r3, [r7, #24]
  return result;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bc4:	bf00      	nop
 8001bc6:	3724      	adds	r7, #36	; 0x24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	613b      	str	r3, [r7, #16]
  return result;
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001bfa:	e050      	b.n	8001c9e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d042      	beq.n	8001c98 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d003      	beq.n	8001c22 <LL_GPIO_Init+0x52>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d10d      	bne.n	8001c3e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	461a      	mov	r2, r3
 8001c28:	69b9      	ldr	r1, [r7, #24]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ff12 	bl	8001a54 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	461a      	mov	r2, r3
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff fef3 	bl	8001a24 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	461a      	mov	r2, r3
 8001c44:	69b9      	ldr	r1, [r7, #24]
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ff33 	bl	8001ab2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d11a      	bne.n	8001c8a <LL_GPIO_Init+0xba>
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	fa93 f3a3 	rbit	r3, r3
 8001c5e:	60bb      	str	r3, [r7, #8]
  return result;
 8001c60:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b07      	cmp	r3, #7
 8001c6a:	d807      	bhi.n	8001c7c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	461a      	mov	r2, r3
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff4b 	bl	8001b10 <LL_GPIO_SetAFPin_0_7>
 8001c7a:	e006      	b.n	8001c8a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	461a      	mov	r2, r3
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff72 	bl	8001b6e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	69b9      	ldr	r1, [r7, #24]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fe97 	bl	80019c6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1a7      	bne.n	8001bfc <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <LL_RCC_GetSysClkSource>:
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <LL_RCC_GetSysClkSource+0x18>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800

08001cd4 <LL_RCC_GetAHBPrescaler>:
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <LL_RCC_GetAHBPrescaler+0x18>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <LL_RCC_GetAPB1Prescaler>:
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <LL_RCC_GetAPB2Prescaler>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <LL_RCC_PLL_GetMainSource+0x18>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <LL_RCC_PLL_GetN+0x18>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40023800 	.word	0x40023800

08001d60 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <LL_RCC_PLL_GetP+0x18>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800

08001d7c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <LL_RCC_PLL_GetDivider+0x18>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800

08001d98 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001da0:	f000 f820 	bl	8001de4 <RCC_GetSystemClockFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f840 	bl	8001e34 <RCC_GetHCLKClockFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f84e 	bl	8001e60 <RCC_GetPCLK1ClockFreq>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f85a 	bl	8001e88 <RCC_GetPCLK2ClockFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60da      	str	r2, [r3, #12]
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001dee:	f7ff ff63 	bl	8001cb8 <LL_RCC_GetSysClkSource>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d00c      	beq.n	8001e12 <RCC_GetSystemClockFreq+0x2e>
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d80f      	bhi.n	8001e1c <RCC_GetSystemClockFreq+0x38>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <RCC_GetSystemClockFreq+0x22>
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d003      	beq.n	8001e0c <RCC_GetSystemClockFreq+0x28>
 8001e04:	e00a      	b.n	8001e1c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001e06:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <RCC_GetSystemClockFreq+0x48>)
 8001e08:	607b      	str	r3, [r7, #4]
      break;
 8001e0a:	e00a      	b.n	8001e22 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <RCC_GetSystemClockFreq+0x4c>)
 8001e0e:	607b      	str	r3, [r7, #4]
      break;
 8001e10:	e007      	b.n	8001e22 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8001e12:	2008      	movs	r0, #8
 8001e14:	f000 f84c 	bl	8001eb0 <RCC_PLL_GetFreqDomain_SYS>
 8001e18:	6078      	str	r0, [r7, #4]
      break;
 8001e1a:	e002      	b.n	8001e22 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	; (8001e2c <RCC_GetSystemClockFreq+0x48>)
 8001e1e:	607b      	str	r3, [r7, #4]
      break;
 8001e20:	bf00      	nop
  }

  return frequency;
 8001e22:	687b      	ldr	r3, [r7, #4]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	00f42400 	.word	0x00f42400
 8001e30:	017d7840 	.word	0x017d7840

08001e34 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001e3c:	f7ff ff4a 	bl	8001cd4 <LL_RCC_GetAHBPrescaler>
 8001e40:	4603      	mov	r3, r0
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <RCC_GetHCLKClockFreq+0x28>)
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	40d3      	lsrs	r3, r2
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	080023ec 	.word	0x080023ec

08001e60 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001e68:	f7ff ff42 	bl	8001cf0 <LL_RCC_GetAPB1Prescaler>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	0a9b      	lsrs	r3, r3, #10
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <RCC_GetPCLK1ClockFreq+0x24>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	40d3      	lsrs	r3, r2
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	080023fc 	.word	0x080023fc

08001e88 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001e90:	f7ff ff3c 	bl	8001d0c <LL_RCC_GetAPB2Prescaler>
 8001e94:	4603      	mov	r3, r0
 8001e96:	0b5b      	lsrs	r3, r3, #13
 8001e98:	4a04      	ldr	r2, [pc, #16]	; (8001eac <RCC_GetPCLK2ClockFreq+0x24>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	40d3      	lsrs	r3, r2
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	080023fc 	.word	0x080023fc

08001eb0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001ec4:	f7ff ff30 	bl	8001d28 <LL_RCC_PLL_GetMainSource>
 8001ec8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed6:	d003      	beq.n	8001ee0 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001ed8:	e005      	b.n	8001ee6 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001edc:	617b      	str	r3, [r7, #20]
      break;
 8001ede:	e005      	b.n	8001eec <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001ee2:	617b      	str	r3, [r7, #20]
      break;
 8001ee4:	e002      	b.n	8001eec <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001ee8:	617b      	str	r3, [r7, #20]
      break;
 8001eea:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d113      	bne.n	8001f1a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001ef2:	f7ff ff43 	bl	8001d7c <LL_RCC_PLL_GetDivider>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fbb3 f4f2 	udiv	r4, r3, r2
 8001efe:	f7ff ff21 	bl	8001d44 <LL_RCC_PLL_GetN>
 8001f02:	4603      	mov	r3, r0
 8001f04:	fb03 f404 	mul.w	r4, r3, r4
 8001f08:	f7ff ff2a 	bl	8001d60 <LL_RCC_PLL_GetP>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	0c1b      	lsrs	r3, r3, #16
 8001f10:	3301      	adds	r3, #1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fbb4 f3f3 	udiv	r3, r4, r3
 8001f18:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8001f1a:	693b      	ldr	r3, [r7, #16]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd90      	pop	{r4, r7, pc}
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	017d7840 	.word	0x017d7840

08001f2c <LL_SPI_IsEnabled>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3c:	2b40      	cmp	r3, #64	; 0x40
 8001f3e:	d101      	bne.n	8001f44 <LL_SPI_IsEnabled+0x18>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <LL_SPI_IsEnabled+0x1a>
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_SPI_SetCRCPolynomial>:
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ffd3 	bl	8001f2c <LL_SPI_IsEnabled>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d139      	bne.n	8002000 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f94:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	6811      	ldr	r1, [r2, #0]
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	6852      	ldr	r2, [r2, #4]
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	6892      	ldr	r2, [r2, #8]
 8001fa6:	4311      	orrs	r1, r2
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	68d2      	ldr	r2, [r2, #12]
 8001fac:	4311      	orrs	r1, r2
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	6912      	ldr	r2, [r2, #16]
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	6952      	ldr	r2, [r2, #20]
 8001fb8:	4311      	orrs	r1, r2
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	6992      	ldr	r2, [r2, #24]
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	69d2      	ldr	r2, [r2, #28]
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	6a12      	ldr	r2, [r2, #32]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f023 0204 	bic.w	r2, r3, #4
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	0c1b      	lsrs	r3, r3, #16
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fee:	d105      	bne.n	8001ffc <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffab 	bl	8001f52 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	61da      	str	r2, [r3, #28]
  return status;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <LL_TIM_SetPrescaler>:
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_TIM_SetAutoReload>:
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_TIM_SetRepetitionCounter>:
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	615a      	str	r2, [r3, #20]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a31      	ldr	r2, [pc, #196]	; (8002164 <LL_TIM_Init+0xd8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00f      	beq.n	80020c4 <LL_TIM_Init+0x38>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020aa:	d00b      	beq.n	80020c4 <LL_TIM_Init+0x38>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <LL_TIM_Init+0xdc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d007      	beq.n	80020c4 <LL_TIM_Init+0x38>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a2d      	ldr	r2, [pc, #180]	; (800216c <LL_TIM_Init+0xe0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d003      	beq.n	80020c4 <LL_TIM_Init+0x38>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a2c      	ldr	r2, [pc, #176]	; (8002170 <LL_TIM_Init+0xe4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d106      	bne.n	80020d2 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a23      	ldr	r2, [pc, #140]	; (8002164 <LL_TIM_Init+0xd8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d01b      	beq.n	8002112 <LL_TIM_Init+0x86>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d017      	beq.n	8002112 <LL_TIM_Init+0x86>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <LL_TIM_Init+0xdc>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d013      	beq.n	8002112 <LL_TIM_Init+0x86>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1f      	ldr	r2, [pc, #124]	; (800216c <LL_TIM_Init+0xe0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00f      	beq.n	8002112 <LL_TIM_Init+0x86>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <LL_TIM_Init+0xe4>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00b      	beq.n	8002112 <LL_TIM_Init+0x86>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <LL_TIM_Init+0xe8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <LL_TIM_Init+0x86>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <LL_TIM_Init+0xec>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d003      	beq.n	8002112 <LL_TIM_Init+0x86>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a1b      	ldr	r2, [pc, #108]	; (800217c <LL_TIM_Init+0xf0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d106      	bne.n	8002120 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff80 	bl	8002032 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff6c 	bl	8002016 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a08      	ldr	r2, [pc, #32]	; (8002164 <LL_TIM_Init+0xd8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d105      	bne.n	8002152 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff7e 	bl	800204e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ff89 	bl	800206a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40010000 	.word	0x40010000
 8002168:	40000400 	.word	0x40000400
 800216c:	40000800 	.word	0x40000800
 8002170:	40000c00 	.word	0x40000c00
 8002174:	40014000 	.word	0x40014000
 8002178:	40014400 	.word	0x40014400
 800217c:	40014800 	.word	0x40014800

08002180 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <LL_InitTick+0x30>)
 8002194:	3b01      	subs	r3, #1
 8002196:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <LL_InitTick+0x30>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <LL_InitTick+0x30>)
 80021a0:	2205      	movs	r2, #5
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80021bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ffdd 	bl	8002180 <LL_InitTick>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <LL_mDelay+0x48>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80021de:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e6:	d00c      	beq.n	8002202 <LL_mDelay+0x32>
  {
    Delay++;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3301      	adds	r3, #1
 80021ec:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80021ee:	e008      	b.n	8002202 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <LL_mDelay+0x48>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <LL_mDelay+0x32>
    {
      Delay--;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f3      	bne.n	80021f0 <LL_mDelay+0x20>
    }
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <LL_SetSystemCoreClock+0x1c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000018 	.word	0x20000018

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	4d0d      	ldr	r5, [pc, #52]	; (8002274 <__libc_init_array+0x38>)
 8002240:	4c0d      	ldr	r4, [pc, #52]	; (8002278 <__libc_init_array+0x3c>)
 8002242:	1b64      	subs	r4, r4, r5
 8002244:	10a4      	asrs	r4, r4, #2
 8002246:	2600      	movs	r6, #0
 8002248:	42a6      	cmp	r6, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	4d0b      	ldr	r5, [pc, #44]	; (800227c <__libc_init_array+0x40>)
 800224e:	4c0c      	ldr	r4, [pc, #48]	; (8002280 <__libc_init_array+0x44>)
 8002250:	f000 f820 	bl	8002294 <_init>
 8002254:	1b64      	subs	r4, r4, r5
 8002256:	10a4      	asrs	r4, r4, #2
 8002258:	2600      	movs	r6, #0
 800225a:	42a6      	cmp	r6, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f855 3b04 	ldr.w	r3, [r5], #4
 8002264:	4798      	blx	r3
 8002266:	3601      	adds	r6, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f855 3b04 	ldr.w	r3, [r5], #4
 800226e:	4798      	blx	r3
 8002270:	3601      	adds	r6, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	08002404 	.word	0x08002404
 8002278:	08002404 	.word	0x08002404
 800227c:	08002404 	.word	0x08002404
 8002280:	08002408 	.word	0x08002408

08002284 <memset>:
 8002284:	4402      	add	r2, r0
 8002286:	4603      	mov	r3, r0
 8002288:	4293      	cmp	r3, r2
 800228a:	d100      	bne.n	800228e <memset+0xa>
 800228c:	4770      	bx	lr
 800228e:	f803 1b01 	strb.w	r1, [r3], #1
 8002292:	e7f9      	b.n	8002288 <memset+0x4>

08002294 <_init>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr

080022a0 <_fini>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr
